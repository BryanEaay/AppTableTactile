using System.ComponentModel;
using System.Windows;
using System.Windows.Media;

namespace AppPalaisRois
{
    public class Piece : INotifyPropertyChanged
    {
        #region Private Fields

        private Type type;

        #endregion Private Fields

        #region Public Constructors

        public Piece(Type t, string i, int taille)
        {
            NotPlaced = true;
            ScatterCenter = new Point();
            ImgSrc = i;
            taillePuzzle = taille;
            type = t;
        }

        #endregion Public Constructors

        #region Private Destructors

        ~Piece()
        {
            PropertyChanged = null;
            imgSrc = null;
            taillePuzzle = xClip = yClip = 0;
            orientation = 0;
        }

        #endregion Private Destructors

        #region Public Events

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion Public Events

        #region Public Enums

        public enum Type { TOPLEFT = 0, TOP = 1, TOPRIGHT = 2, LEFT = 3, CENTER = 4, RIGHT = 5, BOTLEFT = 6, BOTTOM = 7, BOTRIGHT = 8 }

        #endregion Public Enums

        #region Static

        public static readonly double ANGLETHRESHOLD = 30.0;
        public static readonly int THRESHOLD = 30;
        /**
         * Pieces
         *
         */
        public static Geometry BotLeft;
        public static Geometry BotRight;
        public static Geometry Bottom;
        public static Geometry Center;
        public static Geometry Left;
        public static Geometry Right;
        public static Geometry Top;
        public static Geometry TopLeft;
        public static Geometry TopRight;

        static Piece()
        {
            TopLeft = Geometry.Parse("M0,0 L150,0 150,50 150,50 150,50 C150,54.260921 145.25,56.39315 140,56.518101 134.25027,56.654942 134.04739,52.567127 130,50.524639 129.16667,50.104103 126.50002,49.937508 125,50.020805 111.19288,50.020805 100,61.20903 100,75.010399 100,88.811775 111.19288,100 125,100 126.7126,100 129.1129,99.65567 130,99.250313 134.375,97.251144 134.83333,92.753014 140,92.753014 145.16667,92.753014 150,95.373878 150,100 L150,100 150,100 150,150 100,150 100,150 100,150 C95.739082,150 93.60685,145.25 93.481903,140 93.345062,134.25027 97.432877,134.04739 99.475365,130 99.895897,129.16667 100.06249,126.50002 99.979195,125 99.979195,111.19288 88.79097,100 74.989601,100 61.188225,100 50,111.19288 50,125 50,126.7126 50.34433,129.1129 50.749687,130 52.748856,134.375 57.246983,134.83333 57.246983,140 57.246983,145.16667 54.626118,150 50.749687,150 L50,150 50,150 0,150 0,0 z");
            Top = Geometry.Parse("M50,0 L200,0 200,50 200,50 200,50 C200,54.260921 195.25,56.39315 190,56.518101 184.25027,56.654942 184.04739,52.567127 180,50.524639 179.16667,50.104103 176.50002,49.937508 175,50.020805 161.19289,50.020805 150,61.20903 150,75.010399 150,88.811775 161.19289,100 175,100 176.7126,100 179.1129,99.65567 180,99.250313 184.375,97.251144 184.83333,92.753014 190,92.753014 195.16667,92.753014 200,95.373878 200,99.250313 L200,100 200,100 200,150 150,150 150,150 150,150 C145.73907,150 143.60684,145.25 143.4819,140 143.34506,134.25027 147.43288,134.04739 149.47536,130 149.8959,129.16667 150.0625,126.50002 149.9792,125 149.9792,111.19288 138.79097,100 124.9896,100 111.18822,100 100,111.19288 100,125 100,126.7126 100.34433,129.1129 100.74969,130 102.74886,134.375 107.24699,134.83333 107.24699,140 107.24699,145.16667 104.62612,150 100,150 L100,150 100,150 50,150 50,100 50,100 50,100 C50,95.373878 45.166668,92.753014 40,92.753014 34.833332,92.753014 34.375,97.251144 30.000002,99.250313 29.112906,99.65567 26.712603,100 24.999996,100 11.192883,100 0,88.811775 0,75.010399 0,61.20903 11.192883,50.020805 24.999996,50.020805 26.5,49.937508 29.166668,50.104103 30.000002,50.524639 34.047398,52.567127 34.250271,56.654942 40,56.518101 45.25,56.39315 50,54.260921 50,50 L50,50 50,50 50,0 z");
            TopRight = Geometry.Parse("M50,0 L200,0 200,150 150,150 150,150 150,150 C145.73907,150 143.60684,145.25 143.4819,140 143.34506,134.25027 147.43288,134.04739 149.47536,130 149.8959,129.16667 150.0625,126.50002 149.9792,125 149.9792,111.19288 138.79097,100 124.9896,100 111.18822,100 100,111.19288 100,125 100,126.7126 100.34433,129.1129 100.74969,130 102.74886,134.375 107.24699,134.83333 107.24699,140 107.24699,145.16667 104.62612,150 100.74969,150 L100,149.92439 100,150 50,150 50,100 49.924393,100 50,99.250313 C50,95.373878 45.166668,92.753014 40,92.753014 34.833332,92.753014 34.375,97.251144 30.000002,99.250313 29.112906,99.65567 26.712603,100 24.999996,100 11.192883,100 0,88.811775 0,75.010399 0,61.20903 11.192883,50.020805 24.999996,50.020805 26.5,49.937508 29.166668,50.104103 30.000002,50.524639 34.047398,52.567127 34.250271,56.654942 40,56.518101 45.25,56.39315 50,54.260921 50,50.270699 L49.9748,50.020805 50,50.020805 50,0 z");
            Left = Geometry.Parse("M75,0 C88.79097,0 100,11.192883 100,25 100,26.50005 100,29.166674 99.475365,30.000002 97.432877,34.047398 93.345062,34.250271 93.481903,40 93.60685,45.25 95.739082,50 99.729301,50 L99.979195,49.9748 99.979195,50 150,50 150,100.02081 149.97479,100.02081 150,100.2707 C150,104.26092 145.25,106.39315 140,106.5181 134.25027,106.65494 134.04739,102.56712 130,100.52464 129.16667,100.1041 126.50002,99.937508 125,100.02081 111.19288,100.02081 100,111.20903 100,125.0104 100,138.81178 111.19288,150 125,150 126.7126,150 129.1129,149.65567 130,149.25031 134.375,147.25114 134.83333,142.75302 140,142.75302 145.16667,142.75302 150,145.37389 150,149.25031 L149.92439,150 150,150 150,200 99.979195,200 99.979195,199.97479 99.729301,200 C95.739082,200 93.60685,195.25 93.481903,190 93.345062,184.25027 97.432877,184.04739 99.475365,180 99.895897,179.16667 100.06249,176.50002 99.979195,175 99.979195,161.19289 88.79097,150 74.989601,150 61.188225,150 50,161.19289 50,175 50,176.7126 50.34433,179.1129 50.749687,180 52.748856,184.375 57.246983,184.83333 57.246983,190 57.246983,195.16667 54.626118,200 50.749687,200 L50,199.92439 50,200 0,200 0,50 50,50 50,49.924393 50.749687,50 C54.626118,50 57.246983,45.166668 57.246983,40 57.246983,34.833332 52.748856,34.375 50.749687,30.000002 50.34433,29.112906 50,26.712603 50,24.999996 50,11.192883 61.188225,0 74.989601,0 z");
            Center = Geometry.Parse("M125,0 C138.79097,0 150,11.192883 150,25 150,26.500017 150,29.166668 149.47536,30.000002 147.43288,34.047397 143.34506,34.250271 143.4819,40.000001 143.60684,45.25 145.73907,50 149.72929,50 L149.9792,49.974799 149.9792,50 200,50 200,100.02081 199.97479,100.02081 200,100.2707 C200,104.26092 195.25,106.39315 190,106.5181 184.25027,106.65494 184.04739,102.56713 180,100.52464 179.16667,100.1041 176.50002,99.937508 175,100.02081 161.19289,100.02081 150,111.20903 150,125.0104 150,138.81178 161.19289,150 175,150 176.7126,150 179.1129,149.65567 180,149.25031 184.375,147.25114 184.83333,142.75301 190,142.75301 195.16667,142.75301 200,145.37388 200,149.25031 L199.92439,150 200,150 200,200 149.97919,200 149.97919,199.97479 149.72931,200 C145.73909,200 143.60684,195.25 143.4819,190 143.34506,184.25027 147.43288,184.04739 149.47537,180 149.89589,179.16667 150.06248,176.50002 149.97919,175 149.97919,161.19288 138.79097,150 124.9896,150 111.18822,150 100,161.19288 100,175 100,176.7126 100.34433,179.1129 100.74969,180 102.74886,184.375 107.24699,184.83333 107.24699,190 107.24699,195.16667 104.62612,200 100.74969,200 L100,199.92439 100,200 50,200 50,150 49.924393,150 50,149.25031 C50,145.37388 45.166668,142.75301 40,142.75301 34.833332,142.75301 34.375,147.25114 30.000002,149.25031 29.112906,149.65567 26.712603,150 24.999996,150 11.192883,150 0,138.81178 0,125.0104 0,111.20903 11.192883,100.02081 24.999996,100.02081 26.5,99.937508 29.166668,100.1041 30.000002,100.52464 34.047398,102.56713 34.250271,106.65494 40,106.5181 45.25,106.39315 50,104.26092 50,100.2707 L49.9748,100.02081 50,100.02081 50,50 100,50 100,49.924394 100.74969,50 C104.62612,50 107.24699,45.166667 107.24699,40.000001 107.24699,34.833333 102.74886,34.375 100.74969,30.000002 100.34433,29.112906 100,26.712603 100,25 100,11.192883 111.18822,0 124.9896,0 z");
            Right = Geometry.Parse("M125,0 C138.79097,0 150,11.192883 150,25 150,26.50005 150,29.166674 149.47537,30.000002 147.43288,34.047398 143.34506,34.250271 143.4819,40 143.60684,45.25 145.73909,50 149.72931,50 L149.97919,49.9748 149.97919,50 200,50 200,200 149.9792,200 149.9792,199.97479 149.72929,200 C145.73907,200 143.60684,195.25 143.4819,190 143.34506,184.25027 147.43288,184.04739 149.47536,180 149.8959,179.16667 150.0625,176.50002 149.9792,175 149.9792,161.19289 138.79097,150 124.9896,150 111.18822,150 100,161.19289 100,175 100,176.7126 100.34433,179.1129 100.74969,180 102.74886,184.375 107.24699,184.83333 107.24699,190 107.24699,195.16667 104.62612,200 100.74969,200 L100,199.92439 100,200 50,200 50,150 49.924393,150 50,149.25031 C50,145.37389 45.166668,142.75302 40,142.75302 34.833332,142.75302 34.375,147.25114 30.000002,149.25031 29.112906,149.65567 26.712603,150 24.999996,150 11.192883,150 0,138.81178 0,125.0104 0,111.20903 11.192883,100.02081 24.999996,100.02081 26.500032,99.937508 29.166672,100.1041 30.000002,100.52464 34.047398,102.56712 34.250271,106.65494 40,106.5181 45.25,106.39315 50,104.26092 50,100.2707 L49.9748,100.02081 50,100.02081 50,50 100,50 100,49.924393 100.74969,50 C104.62612,50 107.24699,45.166668 107.24699,40 107.24699,34.833332 102.74886,34.375 100.74969,30.000002 100.34433,29.112906 100,26.712603 100,24.999996 100,11.192883 111.18822,0 124.9896,0 z");
            BotLeft = Geometry.Parse("M75,0 C88.79097,0 100,11.192883 100,25 100,26.500032 100,29.166672 99.475365,30.000002 97.432877,34.047398 93.345062,34.250271 93.481903,40 93.60685,45.25 95.739082,50 99.729301,50 L99.979195,49.9748 99.979195,50 150,50 150,100.02081 149.97479,100.02081 150,100.2707 C150,104.26092 145.25,106.39315 140,106.5181 134.25027,106.65494 134.04739,102.56712 130,100.52464 129.16667,100.1041 126.50002,99.937508 125,100.02081 111.19288,100.02081 100,111.20903 100,125.0104 100,138.81178 111.19288,150 125,150 126.7126,150 129.1129,149.65567 130,149.25031 134.375,147.25114 134.83333,142.75302 140,142.75302 145.16667,142.75302 150,145.37389 150,149.25031 L149.92439,150 150,150 150,200 0,200 0,50 50,50 50,49.924393 50.749687,50 C54.626118,50 57.246983,45.166668 57.246983,40 57.246983,34.833332 52.748856,34.375 50.749687,30.000002 50.34433,29.112906 50,26.712603 50,24.999996 50,11.192883 61.188225,0 74.989601,0 z");
            Bottom = Geometry.Parse("M125,0 C138.79097,0 150,11.192883 150,25 150,26.50005 150,29.166674 149.47537,30.000002 147.43288,34.047398 143.34506,34.250271 143.4819,40 143.60684,45.25 145.73909,50 149.72931,50 L149.97919,49.9748 149.97919,50 200,50 200,100.02081 199.97479,100.02081 200,100.2707 C200,104.26092 195.25,106.39315 190,106.5181 184.25027,106.65494 184.04739,102.56712 180,100.52464 179.16667,100.1041 176.50002,99.937508 175,100.02081 161.19289,100.02081 150,111.20903 150,125.0104 150,138.81178 161.19289,150 175,150 176.7126,150 179.1129,149.65567 180,149.25031 184.375,147.25114 184.83333,142.75302 190,142.75302 195.16667,142.75302 200,145.37389 200,149.25031 L199.92439,150 200,150 200,200 50,200 50,150 49.924393,150 50,149.25031 C50,145.37389 45.166668,142.75302 40,142.75302 34.833332,142.75302 34.375,147.25114 30.000002,149.25031 29.112906,149.65567 26.712603,150 24.999996,150 11.192883,150 0,138.81178 0,125.0104 0,111.20903 11.192883,100.02081 24.999996,100.02081 26.500032,99.937508 29.166672,100.1041 30.000002,100.52464 34.047398,102.56712 34.250271,106.65494 40,106.5181 45.25,106.39315 50,104.26092 50,100.2707 L49.9748,100.02081 50,100.02081 50,50 100,50 100,49.924393 100.74969,50 C104.62612,50 107.24699,45.166668 107.24699,40 107.24699,34.833332 102.74886,34.375 100.74969,30.000002 100.34433,29.112906 100,26.712603 100,24.999996 100,11.192883 111.18822,0 124.9896,0 z");
            BotRight = Geometry.Parse("M125,0 C138.79097,0 150,11.192883 150,25 150,26.500015 150,29.16667 149.47536,30.000002 147.43288,34.047397 143.34506,34.250271 143.4819,40.000001 143.60684,45.25 145.73907,50 149.72929,50 L149.9792,49.974799 149.9792,50 200,50 200,200 50,200 50,150 49.924393,150 50,149.25031 C50,145.37388 45.166668,142.75301 40,142.75301 34.833332,142.75301 34.375,147.25114 30.000002,149.25031 29.112906,149.65567 26.712603,150 24.999996,150 11.192883,150 0,138.81178 0,125.0104 0,111.20903 11.192883,100.02081 24.999996,100.02081 26.5,99.937508 29.166668,100.1041 30.000002,100.52464 34.047398,102.56713 34.250271,106.65494 40,106.5181 45.25,106.39315 50,104.26092 50,100.2707 L49.9748,100.02081 50,100.02081 50,50 100,50 100,49.924394 100.74969,50 C104.62612,50 107.24699,45.166667 107.24699,40.000001 107.24699,34.833333 102.74886,34.375 100.74969,30.000002 100.34433,29.112906 100,26.712603 100,24.999996 100,11.192883 111.18822,0 124.9896,0 z");
        }

        #endregion Static

        #region Clipping

        private string imgSrc;
        private int taillePuzzle;
        private int xClip;
        private int yClip;

        public int HeightClip
        {
            get
            {
                return this.topOffset + 150;
            }
        }

        public int ImgHeight
        {
            get
            {
                switch (taillePuzzle)
                {
                    case 6: return 300;
                    case 12: return 450;
                    default: return 0;
                }
            }
        }

        public string ImgSrc
        {
            get { return imgSrc; }
            set
            {
                imgSrc = value;
                OnPropertyChanged("ImgSrc");
            }
        }

        public int ImgWidth
        {
            get
            {
                switch (taillePuzzle)
                {
                    case 6: return 450;
                    case 12: return 600;
                    default: return 0;
                }
            }
        }

        public int leftOffset
        {
            get
            {
                int r = 0;
                switch (type)
                {
                    case Type.TOPLEFT: goto case Type.LEFT;
                    case Type.BOTLEFT: goto case Type.LEFT;
                    case Type.LEFT: r = 0; break;
                    default: r = 50; break;
                }
                return r;
            }
        }

        public Rect rect
        {
            get
            {
                return new Rect((double)XClip, (double)YClip, (double)WidthClip, (double)HeightClip);
            }
        }

        public Geometry Shape
        {
            get
            {
                Geometry r;
                switch ((int)type)
                {
                    case 0: r = Piece.TopLeft; break;
                    case 1: r = Piece.Top; break;
                    case 2: r = Piece.TopRight; break;
                    case 3: r = Piece.Left; break;

                    case 5: r = Piece.Right; break;
                    case 6: r = Piece.BotLeft; break;
                    case 7: r = Piece.Bottom; break;
                    case 8: r = Piece.BotRight; break;

                    default: r = Piece.Center; break;
                }
                return r;
            }
        }

        public int topOffset
        {
            get
            {
                int r = 0;
                switch (type)
                {
                    case Type.TOPLEFT: goto case Type.TOP;
                    case Type.TOPRIGHT: goto case Type.TOP;
                    case Type.TOP: r = 0; break;
                    default: r = 50; break;
                }
                return r;
            }
        }

        public int WidthClip
        {
            get
            {
                return this.leftOffset + 150;
            }
        }

        public int XClip
        {
            get { return xClip; }
            set
            {
                xClip = value;
            }
        }

        public int YClip
        {
            get { return yClip; }
            set { yClip = value; }
        }

        #endregion Clipping

        #region Position

        private bool notPlaced;
        private double orientation;

        private Point scatterCenter;

        public bool NotPlaced
        {
            get
            {
                return notPlaced;
            }
            set
            {
                notPlaced = value;
                OnPropertyChanged("NotPlaced");
            }
        }

        public double Orientation
        {
            get { return orientation; }
            set
            {
                orientation = value;
            }
        }

        /*       private int targetX;
               public int TargetX
               {
                   get { return targetX; }
                   set { targetX = value; }
               }

               private int targetY;
               public int TargetY
               {
                   get { return targetY; }
                   set { targetY = value; }
               }*/

        public Point ScatterCenter
        {
            get { return scatterCenter; }
            set { scatterCenter = value; }
        }

        public double XPos
        {
            get
            {
                return ScatterCenter.X;
            }
        }

        public double YPos
        {
            get
            {
                return ScatterCenter.Y;
            }
        }

        #endregion Position

        #region Public Methods

        public bool IsInPosition(double scatterWidth, double scatterHeight)
        {
            double tX = scatterWidth / 2;
            double tY = scatterHeight / 2;

            if ((XPos < (tX + Piece.THRESHOLD))
            && (XPos > (tX - Piece.THRESHOLD))
            && (YPos < (tY + Piece.THRESHOLD))
            && (YPos > (tY - Piece.THRESHOLD))
            && ((Orientation > (360 - Piece.ANGLETHRESHOLD)) || (Orientation < Piece.ANGLETHRESHOLD))
            )
            {
                return true;
            }
            else return false;
        }

        public void OnPropertyChanged(string info)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(info));
        }

        #endregion Public Methods
    }
}